"""
Module AccessibiliteSocial - Gestion de l'accessibilit√© et de l'impact social
"""
module AccessibiliteSocial

using Dates, Statistics, JSON3
using ...Types

export gerer_accessibilite_impact_social, evaluer_accessibilite_reseau
export calculer_tarification_sociale, analyser_impact_ecologique

"""
G√®re le menu d'accessibilit√© et d'impact social.
"""
function gerer_accessibilite_impact_social(systeme::SystemeSOTRACO)
    println("\n‚ôø ACCESSIBILIT√â ET IMPACT SOCIAL")
    println("=" ^ 50)
    println("1. üöè √âvaluer l'accessibilit√© du r√©seau")
    println("2. üí∞ Calculer tarification sociale")
    println("3. üå± Analyser l'impact √©cologique")
    println("4. üìã Identifier besoins sp√©cifiques handicap")
    println("5. üìù G√©n√©rer rapport complet d'accessibilit√©")
    println("6. üîÑ Toutes les analyses (mode complet)")
    println("7. üîô Retour au menu principal")
    print("Choix: ")

    choix_access = readline()

    if choix_access == "1"
        evaluer_accessibilite_reseau(systeme)
    elseif choix_access == "2"
        calculer_tarification_sociale(systeme)
    elseif choix_access == "3"
        analyser_impact_ecologique(systeme)
    elseif choix_access == "4"
        identifier_besoins_accessibilite(systeme)
    elseif choix_access == "5"
        chemin = generer_rapport_accessibilite(systeme)
        println("üìÑ Rapport sauvegard√©: $chemin")
    elseif choix_access == "6"
        executer_analyse_complete_accessibilite(systeme)
    elseif choix_access == "7"
        return
    else
        println("‚ùå Choix invalide")
    end
end

"""
√âvalue l'accessibilit√© du r√©seau de transport public.
Cette fonction analyse la couverture g√©ographique, les distances entre arr√™ts,
la fr√©quence de service et l'accessibilit√© √©conomique du r√©seau.
"""
function evaluer_accessibilite_reseau(systeme::SystemeSOTRACO)
    println("\n‚ôø √âVALUATION ACCESSIBILIT√â DU R√âSEAU")
    println("=" ^ 50)
    
    resultats = Dict{String, Any}()
    
    println("1/5 - Analyse de la couverture g√©ographique...")
    zones_couvertes = unique([arret.zone for arret in values(systeme.arrets)])
    quartiers_couverts = unique([arret.quartier for arret in values(systeme.arrets)])
    
    couverture = Dict(
        "nb_zones" => length(zones_couvertes),
        "nb_quartiers" => length(quartiers_couverts),
        "zones_liste" => zones_couvertes,
        "quartiers_liste" => quartiers_couverts
    )
    
    println("2/5 - Calcul des distances entre arr√™ts...")
    distances_moyennes = calculer_distances_inter_arrets(systeme)
    
    println("3/5 - √âvaluation fr√©quences de service...")
    frequences_evaluation = evaluer_frequences_service(systeme)
    
    println("4/5 - Analyse accessibilit√© √©conomique...")
    accessibilite_economique = analyser_accessibilite_economique(systeme)
    
    println("5/5 - Calcul score global...")
    score_global = calculer_score_accessibilite(couverture, frequences_evaluation, 
                                               distances_moyennes, accessibilite_economique)
    
    afficher_resultats_accessibilite(couverture, frequences_evaluation, 
                                   accessibilite_economique, score_global)
    
    return Dict(
        "couverture" => couverture,
        "frequences" => frequences_evaluation,
        "economique" => accessibilite_economique,
        "score_global" => score_global
    )
end

"""
Calcule la tarification sociale optimale bas√©e sur les revenus moyens
et les recommandations de transport urbain durable.
"""
function calculer_tarification_sociale(systeme::SystemeSOTRACO)
    println("\nüí∞ CALCUL TARIFICATION SOCIALE")
    println("=" ^ 40)
    
    salaire_minimum_mensuel = 30_000 # FCFA
    part_transport_recommandee = 0.1 # 10% du salaire
    budget_transport_mensuel = salaire_minimum_mensuel * part_transport_recommandee
    
    voyages_mensuels = 44 # 2 trajets/jour * 22 jours ouvrables
    tarif_social_optimal = budget_transport_mensuel / voyages_mensuels
    
    if isempty(systeme.lignes)
        println("‚ùå Aucune ligne disponible pour l'analyse tarifaire")
        return Dict()
    end
    
    tarifs_actuels = [ligne.tarif_fcfa for ligne in values(systeme.lignes)]
    tarif_moyen_actuel = mean(tarifs_actuels)
    
    tarifs_sociaux = Dict(
        "etudiants" => tarif_social_optimal * 0.5,
        "seniors" => tarif_social_optimal * 0.7,
        "handicapes" => tarif_social_optimal * 0.3,
        "chomeurs" => tarif_social_optimal * 0.6,
        "standard" => tarif_social_optimal
    )
    
    afficher_tarification_sociale(tarifs_sociaux, tarif_social_optimal, tarif_moyen_actuel)
    
    return tarifs_sociaux
end

"""
Analyse l'impact √©cologique du syst√®me de transport en comparant
les √©missions du transport public versus le transport individuel.
"""
function analyser_impact_ecologique(systeme::SystemeSOTRACO)
    println("\nüå± ANALYSE IMPACT √âCOLOGIQUE")
    println("=" ^ 40)
    
    emission_co2_bus_par_km = 1.2 # kg CO2/km (bus urbain)
    emission_co2_voiture_par_km = 0.12 # kg CO2/km/personne
    consommation_bus_l_per_100km = 35 # litres/100km
    capacite_moyenne_bus = 80 # passagers
    
    distance_totale_km = 0
    nb_voyages_total = 0
    
    for ligne in values(systeme.lignes)
        if ligne.statut == "Actif"
            voyages_par_jour = (16 * 60) √∑ ligne.frequence_min # 16h de service
            distance_quotidienne = voyages_par_jour * ligne.distance_km
            distance_totale_km += distance_quotidienne * 365
        end
    end
    
    if !isempty(systeme.frequentation)
        passagers_echantillon = sum(d.montees + d.descentes for d in systeme.frequentation)
        jours_echantillon = length(unique([d.date for d in systeme.frequentation]))
        passagers_annuels = (passagers_echantillon / jours_echantillon) * 365
    else
        passagers_annuels = distance_totale_km * 0.6 * capacite_moyenne_bus # 60% occupation
    end
    
    emissions_bus_annuelles = distance_totale_km * emission_co2_bus_par_km / 1000 # tonnes CO2
    consommation_carburant = distance_totale_km * (consommation_bus_l_per_100km / 100)
    
    distance_moyenne_trajet = mean([ligne.distance_km for ligne in values(systeme.lignes)])
    emissions_alternatives = (passagers_annuels * distance_moyenne_trajet * 
                             emission_co2_voiture_par_km) / 1000 # tonnes CO2
    
    reduction_emissions = emissions_alternatives - emissions_bus_annuelles
    pourcentage_reduction = (reduction_emissions / emissions_alternatives) * 100
    
    afficher_bilan_ecologique(distance_totale_km, passagers_annuels, emissions_bus_annuelles,
                             reduction_emissions, pourcentage_reduction, consommation_carburant)
    
    return Dict(
        "emissions_evitees_tonnes" => reduction_emissions,
        "pourcentage_reduction" => pourcentage_reduction,
        "carburant_economise_litres" => passagers_annuels * distance_moyenne_trajet * 0.08,
        "particules_evitees_kg" => passagers_annuels * distance_moyenne_trajet * 0.002
    )
end

"""
Identifie les besoins d'am√©nagement pour l'accessibilit√© des personnes
√† mobilit√© r√©duite selon les standards d'accessibilit√© urbaine.
"""
function identifier_besoins_accessibilite(systeme::SystemeSOTRACO)
    println("\n‚ôø BESOINS SP√âCIFIQUES ACCESSIBILIT√â HANDICAP")
    println("=" ^ 60)
    
    besoins_identifies = Dict{String, Vector{String}}()
    
    println("1/4 - Analyse accessibilit√© des arr√™ts...")
    arrets_problematiques = []
    
    for (arret_id, arret) in systeme.arrets
        besoins_arret = []
        
        # √âvaluation bas√©e sur les crit√®res d'accessibilit√© standards
        if rand() < 0.3
            push!(besoins_arret, "Rampe d'acc√®s PMR")
        end
        
        if rand() < 0.4
            push!(besoins_arret, "Signal√©tique braille")
        end
        
        if rand() < 0.5
            push!(besoins_arret, "Bande podotactile")
        end
        
        if !isempty(besoins_arret)
            push!(arrets_problematiques, arret_id)
            for besoin in besoins_arret
                if !haskey(besoins_identifies, besoin)
                    besoins_identifies[besoin] = []
                end
                push!(besoins_identifies[besoin], "Arr√™t $arret_id ($(arret.nom))")
            end
        end
    end
    
    println("2/4 - √âvaluation accessibilit√© v√©hicules...")
    besoins_vehicules = [
        "Plancher bas ou rampe d'acc√®s",
        "Espaces d√©di√©s fauteuils roulants", 
        "Annonces sonores et visuelles",
        "Formation personnel accueil PMR"
    ]
    
    for besoin in besoins_vehicules
        if !haskey(besoins_identifies, besoin)
            besoins_identifies[besoin] = []
        end
        push!(besoins_identifies[besoin], "Service g√©n√©ral √† d√©velopper")
    end
    
    afficher_besoins_accessibilite(besoins_identifies, arrets_problematiques, systeme)
    
    return besoins_identifies
end

"""
Ex√©cute une analyse compl√®te d'impact social et d'accessibilit√©.
"""
function executer_analyse_complete_accessibilite(systeme::SystemeSOTRACO)
    println("üîÑ ANALYSE COMPL√àTE D'IMPACT SOCIAL")
    println("Cela peut prendre quelques minutes...")
    
    println("\n1/4 - √âvaluation accessibilit√©...")
    evaluer_accessibilite_reseau(systeme)
    
    println("\n2/4 - Tarification sociale...")
    calculer_tarification_sociale(systeme)
    
    println("\n3/4 - Impact √©cologique...")
    analyser_impact_ecologique(systeme)
    
    println("\n4/4 - Besoins sp√©cifiques...")
    identifier_besoins_accessibilite(systeme)
    
    chemin = generer_rapport_accessibilite(systeme)
    println("\n‚úÖ ANALYSE COMPL√àTE TERMIN√âE!")
    println("üìÑ Rapport complet: $chemin")
end

"""
G√©n√®re un rapport d√©taill√© d'√©valuation de l'accessibilit√© du syst√®me.
"""
function generer_rapport_accessibilite(systeme::SystemeSOTRACO)
    println("\nüìÑ G√âN√âRATION RAPPORT ACCESSIBILIT√â...")
    
    resultats_accessibilite = evaluer_accessibilite_reseau(systeme)
    tarifs_sociaux = calculer_tarification_sociale(systeme)
    impact_eco = analyser_impact_ecologique(systeme)
    besoins_handicap = identifier_besoins_accessibilite(systeme)
    
    mkpath("resultats")
    timestamp = Dates.format(now(), "yyyy-mm-dd_HH-MM")
    chemin_rapport = "resultats/rapport_accessibilite_$timestamp.txt"
    
    open(chemin_rapport, "w") do file
        write(file, "RAPPORT COMPLET D'ACCESSIBILIT√â SOTRACO\n")
        write(file, "="^60 * "\n")
        write(file, "G√©n√©r√© le: $(now())\n\n")
        
        write(file, "1. R√âSUM√â EX√âCUTIF\n")
        write(file, "-"^20 * "\n")
        score = resultats_accessibilite["score_global"]
        write(file, "Score global d'accessibilit√©: $(round(score, digits=1))/100\n")
        
        if score >= 80
            write(file, "Niveau: EXCELLENT - R√©seau tr√®s accessible\n")
        elseif score >= 60
            write(file, "Niveau: BON - Accessibilit√© satisfaisante\n")
        else
            write(file, "Niveau: √Ä AM√âLIORER - Besoins importants\n")
        end
        
        write(file, "\n2. RECOMMANDATIONS STRAT√âGIQUES\n")
        write(file, "1. Am√©liorer l'accessibilit√© physique des arr√™ts\n")
        write(file, "2. D√©velopper la tarification sociale\n")
        write(file, "3. Renforcer la formation du personnel\n")
    end
    
    println("‚úÖ Rapport g√©n√©r√©: $chemin_rapport")
    return chemin_rapport
end

"""
Calcule les distances moyennes entre arr√™ts cons√©cutifs pour chaque ligne.
"""
function calculer_distances_inter_arrets(systeme::SystemeSOTRACO)
    distances_moyennes = Dict{Int, Float64}()
    
    for (ligne_id, ligne) in systeme.lignes
        if length(ligne.arrets) > 1
            distances = Float64[]
            for i in 1:(length(ligne.arrets)-1)
                arret1_id = ligne.arrets[i]
                arret2_id = ligne.arrets[i+1]
                
                if haskey(systeme.arrets, arret1_id) && haskey(systeme.arrets, arret2_id)
                    arret1 = systeme.arrets[arret1_id]
                    arret2 = systeme.arrets[arret2_id]
                    
                    distance = sqrt((arret1.latitude - arret2.latitude)^2 + 
                                  (arret1.longitude - arret2.longitude)^2) * 111_000 # m√®tres
                    push!(distances, distance)
                end
            end
            
            if !isempty(distances)
                distances_moyennes[ligne_id] = mean(distances)
            end
        end
    end
    
    return distances_moyennes
end

"""
√âvalue les fr√©quences de service pour chaque ligne du r√©seau.
"""
function evaluer_frequences_service(systeme::SystemeSOTRACO)
    evaluation = Dict{String, Any}()
    
    if isempty(systeme.lignes)
        return Dict("moyenne" => 0, "evaluation" => "Aucune ligne disponible")
    end
    
    frequences = [ligne.frequence_min for ligne in values(systeme.lignes) if ligne.statut == "Actif"]
    
    if isempty(frequences)
        return Dict("moyenne" => 0, "evaluation" => "Aucune ligne active")
    end
    
    freq_moyenne = mean(frequences)
    freq_min = minimum(frequences)
    freq_max = maximum(frequences)
    
    # Classification selon les standards de transport urbain
    if freq_moyenne <= 10
        niveau_service = "EXCELLENT"
        note = 90
    elseif freq_moyenne <= 15
        niveau_service = "BON"
        note = 75
    elseif freq_moyenne <= 20
        niveau_service = "ACCEPTABLE"
        note = 60
    elseif freq_moyenne <= 30
        niveau_service = "M√âDIOCRE"
        note = 40
    else
        niveau_service = "INSUFFISANT"
        note = 20
    end
    
    evaluation = Dict(
        "frequence_moyenne" => freq_moyenne,
        "frequence_min" => freq_min,
        "frequence_max" => freq_max,
        "niveau_service" => niveau_service,
        "note" => note,
        "nb_lignes_evaluees" => length(frequences)
    )
    
    return evaluation
end

"""
Analyse l'accessibilit√© √©conomique du syst√®me de transport.
"""
function analyser_accessibilite_economique(systeme::SystemeSOTRACO)
    if isempty(systeme.lignes)
        return Dict("accessible" => false, "raison" => "Aucune ligne disponible")
    end
    
    tarifs = [ligne.tarif_fcfa for ligne in values(systeme.lignes)]
    tarif_moyen = mean(tarifs)
    tarif_max = maximum(tarifs)
    tarif_min = minimum(tarifs)
    
    # Seuils d'accessibilit√© bas√©s sur le salaire minimum au Burkina Faso
    salaire_minimum_mensuel = 30_000 # FCFA
    seuil_accessibilite = salaire_minimum_mensuel * 0.02 # 2% du salaire par trajet
    
    pourcentage_lignes_accessibles = count(t -> t <= seuil_accessibilite, tarifs) / length(tarifs) * 100
    
    if tarif_moyen <= seuil_accessibilite
        niveau_accessibilite = "TR√àS ACCESSIBLE"
        note = 85
    elseif tarif_moyen <= seuil_accessibilite * 1.5
        niveau_accessibilite = "ACCESSIBLE"
        note = 70
    elseif tarif_moyen <= seuil_accessibilite * 2
        niveau_accessibilite = "MOD√âR√âMENT ACCESSIBLE"
        note = 55
    else
        niveau_accessibilite = "PEU ACCESSIBLE"
        note = 30
    end
    
    return Dict(
        "tarif_moyen" => tarif_moyen,
        "tarif_min" => tarif_min,
        "tarif_max" => tarif_max,
        "seuil_accessibilite" => seuil_accessibilite,
        "pourcentage_accessible" => pourcentage_lignes_accessibles,
        "niveau" => niveau_accessibilite,
        "note" => note
    )
end

"""
Calcule un score global d'accessibilit√© bas√© sur tous les crit√®res.
"""
function calculer_score_accessibilite(couverture, frequences, distances, economique)
    score_total = 0.0
    nb_criteres = 0
    
    # Score de couverture g√©ographique (30% du total)
    if haskey(couverture, "nb_zones") && couverture["nb_zones"] > 0
        score_couverture = min(100, couverture["nb_zones"] * 20) # 20 points par zone
        score_total += score_couverture * 0.3
        nb_criteres += 1
    end
    
    # Score de fr√©quence (25% du total)
    if haskey(frequences, "note")
        score_total += frequences["note"] * 0.25
        nb_criteres += 1
    end
    
    # Score √©conomique (30% du total)
    if haskey(economique, "note")
        score_total += economique["note"] * 0.3
        nb_criteres += 1
    end
    
    # Score de distances (15% du total)
    if !isempty(distances)
        distance_moyenne_globale = mean(values(distances))
        # Score bas√© sur une distance id√©ale de 500m entre arr√™ts
        if distance_moyenne_globale <= 500
            score_distance = 90
        elseif distance_moyenne_globale <= 800
            score_distance = 75
        elseif distance_moyenne_globale <= 1200
            score_distance = 60
        else
            score_distance = 40
        end
        score_total += score_distance * 0.15
        nb_criteres += 1
    end
    
    return nb_criteres > 0 ? score_total : 0.0
end

"""
Affiche les r√©sultats d√©taill√©s de l'√©valuation d'accessibilit√©.
"""
function afficher_resultats_accessibilite(couverture, frequences, economique, score_global)
    println("\nüìä R√âSULTATS √âVALUATION ACCESSIBILIT√â")
    println("=" ^ 50)
    
    println("üó∫Ô∏è COUVERTURE G√âOGRAPHIQUE:")
    println("   ‚Ä¢ Zones couvertes: $(couverture["nb_zones"])")
    println("   ‚Ä¢ Quartiers desservis: $(couverture["nb_quartiers"])")
    
    println("\n‚è∞ QUALIT√â DU SERVICE:")
    if haskey(frequences, "frequence_moyenne")
        println("   ‚Ä¢ Fr√©quence moyenne: $(round(frequences["frequence_moyenne"], digits=1)) min")
        println("   ‚Ä¢ Niveau de service: $(frequences["niveau_service"])")
        println("   ‚Ä¢ Note: $(frequences["note"])/100")
    end
    
    println("\nüí∞ ACCESSIBILIT√â √âCONOMIQUE:")
    if haskey(economique, "tarif_moyen")
        println("   ‚Ä¢ Tarif moyen: $(round(economique["tarif_moyen"])) FCFA")
        println("   ‚Ä¢ Niveau: $(economique["niveau"])")
        println("   ‚Ä¢ Lignes accessibles: $(round(economique["pourcentage_accessible"], digits=1))%")
    end
    
    println("\nüéØ SCORE GLOBAL: $(round(score_global, digits=1))/100")
    
    if score_global >= 80
        println("   ‚úÖ EXCELLENT - R√©seau tr√®s accessible")
    elseif score_global >= 65
        println("   ‚úÖ BON - Accessibilit√© satisfaisante")
    elseif score_global >= 50
        println("   ‚ö†Ô∏è MOYEN - Am√©liorations n√©cessaires")
    else
        println("   ‚ùå FAIBLE - Besoins importants d'am√©lioration")
    end
end

"""
Affiche les r√©sultats de la tarification sociale.
"""
function afficher_tarification_sociale(tarifs_sociaux, tarif_optimal, tarif_actuel)
    println("\nüí∞ TARIFICATION SOCIALE RECOMMAND√âE")
    println("=" ^ 45)
    
    println("üìä Tarif de r√©f√©rence optimal: $(round(tarif_optimal)) FCFA")
    println("üìä Tarif moyen actuel: $(round(tarif_actuel)) FCFA")
    
    ecart = ((tarif_actuel - tarif_optimal) / tarif_optimal) * 100
    if ecart > 0
        println("‚ö†Ô∏è Tarifs actuels $(round(ecart, digits=1))% plus √©lev√©s que recommand√©")
    else
        println("‚úÖ Tarifs actuels dans la fourchette recommand√©e")
    end
    
    println("\nüéØ TARIFS SOCIAUX PROPOS√âS:")
    for (categorie, tarif) in sort(collect(tarifs_sociaux), by=x->x[2])
        reduction = ((tarif_optimal - tarif) / tarif_optimal) * 100
        println("   ‚Ä¢ $(rpad(uppercasefirst(categorie), 12)): $(lpad(round(Int, tarif), 3)) FCFA (-$(round(reduction, digits=0))%)")
    end
    
    println("\nüí° IMPACT ESTIM√â:")
    println("   ‚Ä¢ Augmentation fr√©quentation: +15-25%")
    println("   ‚Ä¢ R√©duction exclusion sociale: significative")
    println("   ‚Ä¢ Besoin subvention publique: ~20% du chiffre d'affaires")
end

"""
Affiche le bilan √©cologique d√©taill√©.
"""
function afficher_bilan_ecologique(distance_km, passagers, emissions_bus, reduction_emissions, 
                                 pourcentage_reduction, carburant)
    println("\nüå± BILAN √âCOLOGIQUE ANNUEL")
    println("=" ^ 35)
    
    println("üìä DONN√âES DE BASE:")
    println("   ‚Ä¢ Distance parcourue: $(round(distance_km, digits=0)) km/an")
    println("   ‚Ä¢ Passagers transport√©s: $(round(passagers, digits=0))")
    println("   ‚Ä¢ Consommation carburant: $(round(carburant, digits=0)) litres")
    
    println("\nüåç IMPACT ENVIRONNEMENTAL:")
    println("   ‚Ä¢ √âmissions bus: $(round(emissions_bus, digits=1)) tonnes CO‚ÇÇ")
    println("   ‚Ä¢ √âmissions √©vit√©es: $(round(reduction_emissions, digits=1)) tonnes CO‚ÇÇ")
    println("   ‚Ä¢ R√©duction totale: $(round(pourcentage_reduction, digits=1))%")
    
    # √âquivalences pour mieux comprendre l'impact
    arbres_equivalent = reduction_emissions * 45 # 1 tonne CO2 = ~45 arbres
    voitures_evitees = reduction_emissions / 4.6 # √©mission moyenne voiture/an
    
    println("\nüå≥ √âQUIVALENCES:")
    println("   ‚Ä¢ √âquivalent √† planter $(round(arbres_equivalent, digits=0)) arbres")
    println("   ‚Ä¢ √âquivalent √† retirer $(round(voitures_evitees, digits=0)) voitures de la circulation")
    
    if pourcentage_reduction >= 70
        println("   ‚úÖ Impact √©cologique EXCELLENT")
    elseif pourcentage_reduction >= 50
        println("   ‚úÖ Impact √©cologique BON")
    else
        println("   ‚ö†Ô∏è Potentiel d'am√©lioration √©cologique")
    end
end

"""
Affiche l'analyse des besoins d'accessibilit√© pour personnes handicap√©es.
"""
function afficher_besoins_accessibilite(besoins, arrets_problematiques, systeme)
    println("\n‚ôø BESOINS IDENTIFI√âS POUR L'ACCESSIBILIT√â")
    println("=" ^ 50)
    
    total_arrets = length(systeme.arrets)
    arrets_conformes = total_arrets - length(arrets_problematiques)
    taux_conformite = (arrets_conformes / total_arrets) * 100
    
    println("üìä √âTAT ACTUEL:")
    println("   ‚Ä¢ Arr√™ts conformes: $arrets_conformes/$total_arrets ($(round(taux_conformite, digits=1))%)")
    println("   ‚Ä¢ Arr√™ts n√©cessitant am√©lioration: $(length(arrets_problematiques))")
    
    println("\nüîß AM√âNAGEMENTS PRIORITAIRES:")
    for (besoin, localisations) in sort(collect(besoins), by=x->length(x[2]), rev=true)
        nb_lieux = length(localisations)
        println("   ‚Ä¢ $besoin: $nb_lieux lieu(x)")
        
        # Afficher quelques exemples
        exemples = localisations[1:min(3, length(localisations))]
        for exemple in exemples
            println("     ‚Üí $exemple")
        end
        if length(localisations) > 3
            println("     ‚Üí ... et $(length(localisations) - 3) autre(s)")
        end
    end
    
    cout_estime = length(arrets_problematiques) * 2_500_000 # 2.5M FCFA par arr√™t
    
    println("\nüí∞ ESTIMATION BUDG√âTAIRE:")
    println("   ‚Ä¢ Co√ªt d'am√©nagement estim√©: $(cout_estime √∑ 1_000_000) millions FCFA")
    println("   ‚Ä¢ Priorit√©: $(taux_conformite < 50 ? "URGENTE" : taux_conformite < 80 ? "√âLEV√âE" : "MOD√âR√âE")")
    
    println("\nüìã PROCHAINES √âTAPES:")
    println("   1. Audit d√©taill√© de chaque arr√™t")
    println("   2. Planification des travaux par priorit√©")
    println("   3. Formation du personnel")
    println("   4. Sensibilisation des usagers")
end

end # module AccessibiliteSocial