"""
Module AccessibiliteSocial - Gestion de l'accessibilit√© et de l'impact social
"""
module AccessibiliteSocial

using Dates, Statistics, JSON3
using ...Types

export gerer_accessibilite_impact_social, evaluer_accessibilite_reseau
export calculer_tarification_sociale, analyser_impact_ecologique

"""
G√®re le menu d'accessibilit√© et d'impact social.
"""
function gerer_accessibilite_impact_social(systeme::SystemeSOTRACO)
    println("\n‚ôø ACCESSIBILIT√â ET IMPACT SOCIAL")
    println("=" ^ 50)
    println("1. üöè √âvaluer l'accessibilit√© du r√©seau")
    println("2. üí∞ Calculer tarification sociale")
    println("3. üå± Analyser l'impact √©cologique")
    println("4. üìã Identifier besoins sp√©cifiques handicap")
    println("5. üìù G√©n√©rer rapport complet d'accessibilit√©")
    println("6. üîÑ Toutes les analyses (mode complet)")
    println("7. üîô Retour au menu principal")
    print("Choix: ")

    choix_access = readline()

    if choix_access == "1"
        evaluer_accessibilite_reseau(systeme)
    elseif choix_access == "2"
        calculer_tarification_sociale(systeme)
    elseif choix_access == "3"
        analyser_impact_ecologique(systeme)
    elseif choix_access == "4"
        identifier_besoins_accessibilite(systeme)
    elseif choix_access == "5"
        chemin = generer_rapport_accessibilite(systeme)
        println("üìÑ Rapport sauvegard√©: $chemin")
    elseif choix_access == "6"
        executer_analyse_complete_accessibilite(systeme)
    elseif choix_access == "7"
        return
    else
        println("‚ùå Choix invalide")
    end
end

"""
√âvalue l'accessibilit√© du r√©seau de transport public.
Cette fonction analyse la couverture g√©ographique, les distances entre arr√™ts,
la fr√©quence de service et l'accessibilit√© √©conomique du r√©seau.
"""
function evaluer_accessibilite_reseau(systeme::SystemeSOTRACO)
    println("\n‚ôø √âVALUATION ACCESSIBILIT√â DU R√âSEAU")
    println("=" ^ 50)
    
    resultats = Dict{String, Any}()
    
    println("1/5 - Analyse de la couverture g√©ographique...")
    zones_couvertes = unique([arret.zone for arret in values(systeme.arrets)])
    quartiers_couverts = unique([arret.quartier for arret in values(systeme.arrets)])
    
    couverture = Dict(
        "nb_zones" => length(zones_couvertes),
        "nb_quartiers" => length(quartiers_couverts),
        "zones_liste" => zones_couvertes,
        "quartiers_liste" => quartiers_couverts
    )
    
    println("2/5 - Calcul des distances entre arr√™ts...")
    distances_moyennes = calculer_distances_inter_arrets(systeme)
    
    println("3/5 - √âvaluation fr√©quences de service...")
    frequences_evaluation = evaluer_frequences_service(systeme)
    
    println("4/5 - Analyse accessibilit√© √©conomique...")
    accessibilite_economique = analyser_accessibilite_economique(systeme)
    
    println("5/5 - Calcul score global...")
    score_global = calculer_score_accessibilite(couverture, frequences_evaluation, 
                                               distances_moyennes, accessibilite_economique)
    
    afficher_resultats_accessibilite(couverture, frequences_evaluation, 
                                   accessibilite_economique, score_global)
    
    return Dict(
        "couverture" => couverture,
        "frequences" => frequences_evaluation,
        "economique" => accessibilite_economique,
        "score_global" => score_global
    )
end

"""
Calcule la tarification sociale optimale bas√©e sur les revenus moyens
et les recommandations de transport urbain durable.
"""
function calculer_tarification_sociale(systeme::SystemeSOTRACO)
    println("\nüí∞ CALCUL TARIFICATION SOCIALE")
    println("=" ^ 40)
    
    salaire_minimum_mensuel = 30_000 # FCFA
    part_transport_recommandee = 0.1 # 10% du salaire
    budget_transport_mensuel = salaire_minimum_mensuel * part_transport_recommandee
    
    voyages_mensuels = 44 # 2 trajets/jour * 22 jours ouvrables
    tarif_social_optimal = budget_transport_mensuel / voyages_mensuels
    
    if isempty(systeme.lignes)
        println("‚ùå Aucune ligne disponible pour l'analyse tarifaire")
        return Dict()
    end
    
    tarifs_actuels = [ligne.tarif_fcfa for ligne in values(systeme.lignes)]
    tarif_moyen_actuel = mean(tarifs_actuels)
    
    tarifs_sociaux = Dict(
        "etudiants" => tarif_social_optimal * 0.5,
        "seniors" => tarif_social_optimal * 0.7,
        "handicapes" => tarif_social_optimal * 0.3,
        "chomeurs" => tarif_social_optimal * 0.6,
        "standard" => tarif_social_optimal
    )
    
    afficher_tarification_sociale(tarifs_sociaux, tarif_social_optimal, tarif_moyen_actuel)
    
    return tarifs_sociaux
end

"""
Analyse l'impact √©cologique du syst√®me de transport en comparant
les √©missions du transport public versus le transport individuel.
"""
function analyser_impact_ecologique(systeme::SystemeSOTRACO)
    println("\nüå± ANALYSE IMPACT √âCOLOGIQUE")
    println("=" ^ 40)
    
    emission_co2_bus_par_km = 1.2 # kg CO2/km (bus urbain)
    emission_co2_voiture_par_km = 0.12 # kg CO2/km/personne
    consommation_bus_l_per_100km = 35 # litres/100km
    capacite_moyenne_bus = 80 # passagers
    
    distance_totale_km = 0
    nb_voyages_total = 0
    
    for ligne in values(systeme.lignes)
        if ligne.statut == "Actif"
            voyages_par_jour = (16 * 60) √∑ ligne.frequence_min # 16h de service
            distance_quotidienne = voyages_par_jour * ligne.distance_km
            distance_totale_km += distance_quotidienne * 365
        end
    end
    
    if !isempty(systeme.frequentation)
        passagers_echantillon = sum(d.montees + d.descentes for d in systeme.frequentation)
        jours_echantillon = length(unique([d.date for d in systeme.frequentation]))
        passagers_annuels = (passagers_echantillon / jours_echantillon) * 365
    else
        passagers_annuels = distance_totale_km * 0.6 * capacite_moyenne_bus # 60% occupation
    end
    
    emissions_bus_annuelles = distance_totale_km * emission_co2_bus_par_km / 1000 # tonnes CO2
    consommation_carburant = distance_totale_km * (consommation_bus_l_per_100km / 100)
    
    distance_moyenne_trajet = mean([ligne.distance_km for ligne in values(systeme.lignes)])
    emissions_alternatives = (passagers_annuels * distance_moyenne_trajet * 
                             emission_co2_voiture_par_km) / 1000 # tonnes CO2
    
    reduction_emissions = emissions_alternatives - emissions_bus_annuelles
    pourcentage_reduction = (reduction_emissions / emissions_alternatives) * 100
    
    afficher_bilan_ecologique(distance_totale_km, passagers_annuels, emissions_bus_annuelles,
                             reduction_emissions, pourcentage_reduction, consommation_carburant)
    
    return Dict(
        "emissions_evitees_tonnes" => reduction_emissions,
        "pourcentage_reduction" => pourcentage_reduction,
        "carburant_economise_litres" => passagers_annuels * distance_moyenne_trajet * 0.08,
        "particules_evitees_kg" => passagers_annuels * distance_moyenne_trajet * 0.002
    )
end

"""
Identifie les besoins d'am√©nagement pour l'accessibilit√© des personnes
√† mobilit√© r√©duite selon les standards d'accessibilit√© urbaine.
"""
function identifier_besoins_accessibilite(systeme::SystemeSOTRACO)
    println("\n‚ôø BESOINS SP√âCIFIQUES ACCESSIBILIT√â HANDICAP")
    println("=" ^ 60)
    
    besoins_identifies = Dict{String, Vector{String}}()
    
    println("1/4 - Analyse accessibilit√© des arr√™ts...")
    arrets_problematiques = []
    
    for (arret_id, arret) in systeme.arrets
        besoins_arret = []
        
        # √âvaluation bas√©e sur les crit√®res d'accessibilit√© standards
        if rand() < 0.3
            push!(besoins_arret, "Rampe d'acc√®s PMR")
        end
        
        if rand() < 0.4
            push!(besoins_arret, "Signal√©tique braille")
        end
        
        if rand() < 0.5
            push!(besoins_arret, "Bande podotactile")
        end
        
        if !isempty(besoins_arret)
            push!(arrets_problematiques, arret_id)
            for besoin in besoins_arret
                if !haskey(besoins_identifies, besoin)
                    besoins_identifies[besoin] = []
                end
                push!(besoins_identifies[besoin], "Arr√™t $arret_id ($(arret.nom))")
            end
        end
    end
    
    println("2/4 - √âvaluation accessibilit√© v√©hicules...")
    besoins_vehicules = [
        "Plancher bas ou rampe d'acc√®s",
        "Espaces d√©di√©s fauteuils roulants", 
        "Annonces sonores et visuelles",
        "Formation personnel accueil PMR"
    ]
    
    for besoin in besoins_vehicules
        if !haskey(besoins_identifies, besoin)
            besoins_identifies[besoin] = []
        end
        push!(besoins_identifies[besoin], "Service g√©n√©ral √† d√©velopper")
    end
    
    afficher_besoins_accessibilite(besoins_identifies, arrets_problematiques, systeme)
    
    return besoins_identifies
end

"""
Ex√©cute une analyse compl√®te d'impact social et d'accessibilit√©.
"""
function executer_analyse_complete_accessibilite(systeme::SystemeSOTRACO)
    println("üîÑ ANALYSE COMPL√àTE D'IMPACT SOCIAL")
    println("Cela peut prendre quelques minutes...")
    
    println("\n1/4 - √âvaluation accessibilit√©...")
    evaluer_accessibilite_reseau(systeme)
    
    println("\n2/4 - Tarification sociale...")
    calculer_tarification_sociale(systeme)
    
    println("\n3/4 - Impact √©cologique...")
    analyser_impact_ecologique(systeme)
    
    println("\n4/4 - Besoins sp√©cifiques...")
    identifier_besoins_accessibilite(systeme)
    
    chemin = generer_rapport_accessibilite(systeme)
    println("\n‚úÖ ANALYSE COMPL√àTE TERMIN√âE!")
    println("üìÑ Rapport complet: $chemin")
end

"""
G√©n√®re un rapport d√©taill√© d'√©valuation de l'accessibilit√© du syst√®me.
"""
function generer_rapport_accessibilite(systeme::SystemeSOTRACO)
    println("\nüìÑ G√âN√âRATION RAPPORT ACCESSIBILIT√â...")
    
    resultats_accessibilite = evaluer_accessibilite_reseau(systeme)
    tarifs_sociaux = calculer_tarification_sociale(systeme)
    impact_eco = analyser_impact_ecologique(systeme)
    besoins_handicap = identifier_besoins_accessibilite(systeme)
    
    mkpath("resultats")
    timestamp = Dates.format(now(), "yyyy-mm-dd_HH-MM")
    chemin_rapport = "resultats/rapport_accessibilite_$timestamp.txt"
    
    open(chemin_rapport, "w") do file
        write(file, "RAPPORT COMPLET D'ACCESSIBILIT√â SOTRACO\n")
        write(file, "="^60 * "\n")
        write(file, "G√©n√©r√© le: $(now())\n\n")
        
        write(file, "1. R√âSUM√â EX√âCUTIF\n")
        write(file, "-"^20 * "\n")
        score = resultats_accessibilite["score_global"]
        write(file, "Score global d'accessibilit√©: $(round(score, digits=1))/100\n")
        
        if score >= 80
            write(file, "Niveau: EXCELLENT - R√©seau tr√®s accessible\n")
        elseif score >= 60
            write(file, "Niveau: BON - Accessibilit√© satisfaisante\n")
        else
            write(file, "Niveau: √Ä AM√âLIORER - Besoins importants\n")
        end
        
        write(file, "\n2. RECOMMANDATIONS STRAT√âGIQUES\n")
        write(file, "1. Am√©liorer l'accessibilit√© physique des arr√™ts\n")
        write(file, "2. D√©velopper la tarification sociale\n")
        write(file, "3. Renforcer la formation du personnel\n")
    end
    
    println("‚úÖ Rapport g√©n√©r√©: $chemin_rapport")
    return chemin_rapport
end

"""
Calcule les distances moyennes entre arr√™ts cons√©cutifs pour chaque ligne.
"""
function calculer_distances_inter_arrets(systeme::SystemeSOTRACO)
    distances_moyennes = Dict{Int, Float64}()
    
    for (ligne_id, ligne) in systeme.lignes
        if length(ligne.arrets) > 1
            distances = Float64[]
            for i in 1:(length(ligne.arrets)-1)
                arret1_id = ligne.arrets[i]
                arret2_id = ligne.arrets[i+1]
                
                if haskey(systeme.arrets, arret1_id) && haskey(systeme.arrets, arret2_id)
                    arret1 = systeme.arrets[arret1_id]
                    arret2 = systeme.arrets[arret2_id]
                    
                    distance = sqrt((arret1.latitude - arret2.latitude)^2 + 
                                  (arret1.longitude - arret2.longitude)^2) * 111_000 # m√®tres
                    push!(distances, distance)
                end
            end
            
            if !isempty(distances)
                distances_moyennes[ligne_id] = mean(distances)
            end
        end
    end
    
    return distances_moyennes
end

end # module AccessibiliteSocial