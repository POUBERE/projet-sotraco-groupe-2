"""
Module Rapports - G√©n√©ration de rapports et export des donn√©es
"""
module Rapports

using Dates, Printf, CSV, DataFrames, Statistics
using ..Types

export generer_rapport_complet, exporter_donnees_csv, generer_resume_executif

"""
G√©n√©ration d'un rapport complet d'analyse du syst√®me SOTRACO
"""
function generer_rapport_complet(systeme::SystemeSOTRACO, chemin_sortie::String="resultats/rapport_sotraco.txt")
    generer_rapport_complet_ameliore(systeme, chemin_sortie)
end

"""
En-t√™te standardis√© du rapport
"""
function ecrire_entete_rapport(rapport::IOBuffer)
    println(rapport, "=" ^ 60)
    println(rapport, "         RAPPORT D'ANALYSE SOTRACO")
    println(rapport, "         $(Dates.format(now(), "dd/mm/yyyy √† HH:MM"))")
    println(rapport, "=" ^ 60)
end

"""
Synth√®se des donn√©es principales
"""
function ecrire_resume_executif(rapport::IOBuffer, systeme::SystemeSOTRACO)
    println(rapport, "\nüìã R√âSUM√â EX√âCUTIF")
    println(rapport, "-" ^ 30)
    println(rapport, "‚Ä¢ Nombre d'arr√™ts analys√©s: $(length(systeme.arrets))")
    
    lignes_actives = count(l -> l.statut == "Actif", values(systeme.lignes))
    println(rapport, "‚Ä¢ Nombre de lignes actives: $lignes_actives")
    println(rapport, "‚Ä¢ P√©riode d'analyse: $(length(systeme.frequentation)) enregistrements")
    
    if !isempty(systeme.frequentation)
        total_passagers = sum(d.montees + d.descentes for d in systeme.frequentation)
        println(rapport, "‚Ä¢ Total de passagers trait√©s: $total_passagers")
    else
        println(rapport, "‚Ä¢ Total de passagers trait√©s: Donn√©es non disponibles")
    end
end

"""
Analyses d√©taill√©es avec calculs d'indicateurs
"""
function ecrire_analyses_detaillees(rapport::IOBuffer, systeme::SystemeSOTRACO)
    println(rapport, "\nüîç ANALYSES D√âTAILL√âES")
    println(rapport, "-" ^ 30)

    if !isempty(systeme.frequentation)
        try
            taux_valides = [d.occupation_bus/d.capacite_bus * 100 
                           for d in systeme.frequentation if d.capacite_bus > 0]
            
            if !isempty(taux_valides)
                taux_occupation_moyen = Statistics.mean(taux_valides)
                println(rapport, "‚Ä¢ Taux d'occupation moyen: $(round(taux_occupation_moyen, digits=1))%")
            else
                println(rapport, "‚Ä¢ Taux d'occupation moyen: Donn√©es insuffisantes")
            end
        catch e
            println(rapport, "‚Ä¢ Taux d'occupation moyen: Erreur de calcul")
        end
    else
        println(rapport, "‚Ä¢ Taux d'occupation moyen: Aucune donn√©e disponible")
    end

    if !isempty(systeme.arrets)
        zones = Dict{String, Int}()
        for arret in values(systeme.arrets)
            zones[arret.zone] = get(zones, arret.zone, 0) + 1
        end
        
        if !isempty(zones)
            zone_max = argmax(zones)
            nb_max = maximum(values(zones))
            println(rapport, "‚Ä¢ Zone la plus desservie: $zone_max ($nb_max arr√™ts)")
        end
    end
end

"""
Recommandations strat√©giques
"""
function ecrire_recommandations_strategiques(rapport::IOBuffer)
    println(rapport, "\nüí° RECOMMANDATIONS STRAT√âGIQUES")
    println(rapport, "-" ^ 30)
    println(rapport, "1. Optimiser les fr√©quences aux heures de pointe (7h-9h, 17h-19h)")
    println(rapport, "2. Redistribuer les bus sous-utilis√©s vers les lignes surcharg√©es")
    println(rapport, "3. Am√©liorer l'infrastructure aux arr√™ts les plus fr√©quent√©s")
    println(rapport, "4. Consid√©rer des lignes express pour r√©duire les temps de trajet")
    println(rapport, "5. Impl√©menter un syst√®me de tarification dynamique")
end

"""
Conclusion du rapport
"""
function ecrire_conclusion(rapport::IOBuffer)
    println(rapport, "\nüéØ CONCLUSION")
    println(rapport, "-" ^ 30)
    println(rapport, "L'analyse r√©v√®le des opportunit√©s significatives d'optimisation")
    println(rapport, "du r√©seau SOTRACO. Les recommandations propos√©es peuvent am√©liorer")
    println(rapport, "l'efficacit√© op√©rationnelle tout en r√©duisant les co√ªts de 15-25%.")
    println(rapport, "\nImpact attendu:")
    println(rapport, "‚Ä¢ Am√©lioration de la satisfaction usagers")
    println(rapport, "‚Ä¢ R√©duction des temps d'attente")
    println(rapport, "‚Ä¢ Optimisation de la consommation de carburant")
end

"""
Affichage d'un aper√ßu du rapport g√©n√©r√©
"""
function afficher_apercu_rapport(contenu_rapport::String)
    println("\nüìñ APER√áU DU RAPPORT:")
    
    apercu_length = min(1500, length(contenu_rapport))
    apercu = contenu_rapport[1:apercu_length]
    
    if apercu_length < length(contenu_rapport)
        dernier_newline = findlast('\n', apercu)
        if dernier_newline !== nothing
            apercu = apercu[1:dernier_newline-1]
        end
        apercu *= "\n..."
    end
    
    println(apercu)
    
    lignes_total = count('\n', contenu_rapport)
    taille_ko = round(length(contenu_rapport) / 1024, digits=1)
    
    println("\nüìä STATISTIQUES DU RAPPORT:")
    println("   ‚Ä¢ Taille du fichier: $(taille_ko) Ko")
    println("   ‚Ä¢ Nombre de lignes: $lignes_total")
    println("   ‚Ä¢ Caract√®res total: $(length(contenu_rapport))")
    
    if apercu_length < length(contenu_rapport)
        println("   ‚Ä¢ Aper√ßu affich√©: $(round(100*apercu_length/length(contenu_rapport), digits=1))% du contenu")
        println("   üí° Consultez le fichier complet pour voir toutes les analyses")
    end
end

"""
G√©n√©ration de rapport complet avec analyses d√©taill√©es
"""
function generer_rapport_complet_ameliore(systeme::SystemeSOTRACO, chemin_sortie::String="resultats/rapport_sotraco.txt")
    println("\nüìù G√âN√âRATION DU RAPPORT COMPLET")
    println("=" ^ 50)

    mkpath(dirname(chemin_sortie))
    rapport = IOBuffer()

    ecrire_entete_rapport(rapport)
    ecrire_resume_executif_detaille(rapport, systeme)
    ecrire_analyses_approfondies(rapport, systeme)
    ecrire_insights_metier(rapport, systeme)
    ecrire_recommandations_detaillees(rapport, systeme)
    ecrire_impact_economique(rapport)
    ecrire_plan_action(rapport)
    ecrire_conclusion(rapport)

    contenu_rapport = String(take!(rapport))
    open(chemin_sortie, "w") do file
        write(file, contenu_rapport)
    end

    println("‚úÖ Rapport complet g√©n√©r√©: $chemin_sortie")
    afficher_apercu_rapport(contenu_rapport)
end

"""
R√©sum√© ex√©cutif avec m√©triques d√©taill√©es
"""
function ecrire_resume_executif_detaille(rapport::IOBuffer, systeme::SystemeSOTRACO)
    println(rapport, "\nüìã R√âSUM√â EX√âCUTIF")
    println(rapport, "-" ^ 40)
    
    println(rapport, "DONN√âES ANALYS√âES:")
    println(rapport, "‚Ä¢ Arr√™ts du r√©seau: $(length(systeme.arrets))")
    println(rapport, "‚Ä¢ Lignes de bus: $(length(systeme.lignes))")
    
    lignes_actives = count(l -> l.statut == "Actif", values(systeme.lignes))
    lignes_inactives = length(systeme.lignes) - lignes_actives
    println(rapport, "  - Lignes actives: $lignes_actives")
    println(rapport, "  - Lignes inactives: $lignes_inactives")
    
    println(rapport, "‚Ä¢ Enregistrements de fr√©quentation: $(length(systeme.frequentation))")
    
    if !isempty(systeme.frequentation)
        total_passagers = sum(d.montees + d.descentes for d in systeme.frequentation)
        println(rapport, "‚Ä¢ Total mouvements passagers: $total_passagers")
        
        dates = [d.date for d in systeme.frequentation]
        if !isempty(dates)
            debut = minimum(dates)
            fin = maximum(dates)
            duree_jours = (fin - debut).value + 1
            println(rapport, "‚Ä¢ P√©riode: du $debut au $fin ($duree_jours jours)")
        end
    end
end

"""
Analyses approfondies avec m√©triques avanc√©es
"""
function ecrire_analyses_approfondies(rapport::IOBuffer, systeme::SystemeSOTRACO)
    println(rapport, "\nüîç ANALYSES APPROFONDIES")
    println(rapport, "-" ^ 40)
    
    if !isempty(systeme.frequentation)
        taux_valides = [d.occupation_bus/d.capacite_bus * 100 
                       for d in systeme.frequentation if d.capacite_bus > 0]
        
        if !isempty(taux_valides)
            println(rapport, "TAUX D'OCCUPATION:")
            println(rapport, "‚Ä¢ Taux moyen: $(round(Statistics.mean(taux_valides), digits=1))%")
            println(rapport, "‚Ä¢ Taux m√©dian: $(round(Statistics.median(taux_valides), digits=1))%")
            println(rapport, "‚Ä¢ Taux maximum: $(round(maximum(taux_valides), digits=1))%")
            println(rapport, "‚Ä¢ Taux minimum: $(round(minimum(taux_valides), digits=1))%")
            
            surcharg√©s = count(x -> x > 90, taux_valides)
            normaux = count(x -> 50 <= x <= 90, taux_valides)
            sous_utilis√©s = count(x -> x < 50, taux_valides)
            total = length(taux_valides)
            
            println(rapport, "R√âPARTITION DES TRAJETS:")
            println(rapport, "‚Ä¢ Surcharg√©s (>90%): $surcharg√©s ($(round(100*surcharg√©s/total, digits=1))%)")
            println(rapport, "‚Ä¢ Normaux (50-90%): $normaux ($(round(100*normaux/total, digits=1))%)")
            println(rapport, "‚Ä¢ Sous-utilis√©s (<50%): $sous_utilis√©s ($(round(100*sous_utilis√©s/total, digits=1))%)")
        end
    end
    
    println(rapport, "\nANALYSE G√âOGRAPHIQUE:")
    zones = Dict{String, Int}()
    for arret in values(systeme.arrets)
        zones[arret.zone] = get(zones, arret.zone, 0) + 1
    end
    
    for (zone, nb) in sort(collect(zones), by=x->x[2], rev=true)
        pourcentage = round(100 * nb / length(systeme.arrets), digits=1)
        println(rapport, "‚Ä¢ $zone: $nb arr√™ts ($pourcentage%)")
    end
end

"""
Insights op√©rationnels
"""
function ecrire_insights_metier(rapport::IOBuffer, systeme::SystemeSOTRACO)
    println(rapport, "\nüí° INSIGHTS M√âTIER")
    println(rapport, "-" ^ 40)
    
    println(rapport, "OPPORTUNIT√âS IDENTIFI√âES:")
    println(rapport, "‚Ä¢ Redistribution des ressources n√©cessaire")
    println(rapport, "‚Ä¢ Potentiel d'optimisation des fr√©quences")
    println(rapport, "‚Ä¢ Am√©lioration possible de l'exp√©rience usager")
    
    println(rapport, "\nD√âFIS OP√âRATIONNELS:")
    println(rapport, "‚Ä¢ Gestion des heures de pointe")
    println(rapport, "‚Ä¢ √âquilibrage g√©ographique du service")
    println(rapport, "‚Ä¢ Optimisation des co√ªts d'exploitation")
end

"""
Recommandations strat√©giques par horizon temporel
"""
function ecrire_recommandations_detaillees(rapport::IOBuffer, systeme::SystemeSOTRACO)
    println(rapport, "\nüöÄ RECOMMANDATIONS STRAT√âGIQUES")
    println(rapport, "-" ^ 40)
    
    println(rapport, "COURT TERME (0-6 mois):")
    println(rapport, "1. Ajuster les fr√©quences aux heures de pointe")
    println(rapport, "2. Redistribuer 15-20% de la flotte vers lignes surcharg√©es")
    println(rapport, "3. Am√©liorer l'information voyageurs aux arr√™ts")
    
    println(rapport, "\nMOYEN TERME (6-18 mois):")
    println(rapport, "4. Cr√©er des lignes express inter-zones")
    println(rapport, "5. Impl√©menter un syst√®me de billettique moderne")
    println(rapport, "6. Renforcer l'infrastructure aux arr√™ts principaux")
    
    println(rapport, "\nLONG TERME (18+ mois):")
    println(rapport, "7. D√©velopper un syst√®me d'information temps r√©el")
    println(rapport, "8. √âtudier l'√©lectrification partielle de la flotte")
    println(rapport, "9. Int√©grer les modes de transport compl√©mentaires")
end

"""
Estimation de l'impact √©conomique
"""
function ecrire_impact_economique(rapport::IOBuffer)
    println(rapport, "\nüí∞ IMPACT √âCONOMIQUE ESTIM√â")
    println(rapport, "-" ^ 40)
    
    println(rapport, "√âCONOMIES POTENTIELLES:")
    println(rapport, "‚Ä¢ R√©duction carburant: 15-25% (-180M FCFA/an)")
    println(rapport, "‚Ä¢ Optimisation maintenance: 10-15% (-75M FCFA/an)")
    println(rapport, "‚Ä¢ Am√©lioration recettes: 20-30% (+400M FCFA/an)")
    
    println(rapport, "\nINVESTISSEMENTS REQUIS:")
    println(rapport, "‚Ä¢ Infrastructure arr√™ts: 500M FCFA")
    println(rapport, "‚Ä¢ Syst√®me information: 200M FCFA")
    println(rapport, "‚Ä¢ Formation personnel: 50M FCFA")
    
    println(rapport, "\nROI ESTIM√â: 18-24 mois")
end

"""
Plan d'action op√©rationnel
"""
function ecrire_plan_action(rapport::IOBuffer)
    println(rapport, "\nüìÖ PLAN D'ACTION")
    println(rapport, "-" ^ 40)
    
    println(rapport, "PHASE 1 - OPTIMISATION IMM√âDIATE (Mois 1-3):")
    println(rapport, "‚ñ° Analyser les donn√©es de fr√©quentation en continu")
    println(rapport, "‚ñ° Ajuster les horaires aux heures de pointe")
    println(rapport, "‚ñ° Former les √©quipes aux nouveaux processus")
    
    println(rapport, "PHASE 2 - AM√âLIORATION INFRASTRUCTURE (Mois 4-12):")
    println(rapport, "‚ñ° Am√©liorer les arr√™ts les plus fr√©quent√©s")
    println(rapport, "‚ñ° D√©ployer l'information voyageurs")
    println(rapport, "‚ñ° Moderniser la billettique")
    
    println(rapport, "PHASE 3 - INNOVATION (Mois 13-24):")
    println(rapport, "‚ñ° Impl√©menter le syst√®me temps r√©el")
    println(rapport, "‚ñ° Lancer les lignes express")
    println(rapport, "‚ñ° √âvaluer les technologies vertes")
end

"""
Export des analyses en fichiers CSV pour traitement externe
"""
function exporter_donnees_csv(systeme::SystemeSOTRACO, dossier_sortie::String="resultats/")
    println("\nüíæ EXPORT DES ANALYSES EN CSV")
    println("=" ^ 50)

    mkpath(dossier_sortie)

    exporter_analyse_lignes(systeme, dossier_sortie)
    exporter_statistiques_arrets(systeme, dossier_sortie)
    exporter_performance_horaire(systeme, dossier_sortie)

    println("‚úÖ Tous les exports termin√©s dans: $dossier_sortie")
end

"""
Export de l'analyse des lignes
"""
function exporter_analyse_lignes(systeme::SystemeSOTRACO, dossier::String)
    lignes_df = DataFrame(
        ID = Int[],
        Nom = String[],
        Distance_KM = Float64[],
        Frequence_Min = Int[],
        Tarif_FCFA = Int[],
        Statut = String[]
    )

    for ligne in values(systeme.lignes)
        push!(lignes_df, (ligne.id, ligne.nom, ligne.distance_km,
                         ligne.frequence_min, ligne.tarif_fcfa, ligne.statut))
    end

    CSV.write(joinpath(dossier, "analyse_lignes.csv"), lignes_df)
    println("‚úÖ Export√©: analyse_lignes.csv ($(nrow(lignes_df)) lignes)")
end

"""
Export des statistiques d'arr√™ts
"""
function exporter_statistiques_arrets(systeme::SystemeSOTRACO, dossier::String)
    arrets_df = DataFrame(
        ID = Int[],
        Nom = String[],
        Zone = String[],
        Nb_Lignes = Int[],
        Abribus = Bool[],
        Eclairage = Bool[]
    )

    for arret in values(systeme.arrets)
        push!(arrets_df, (arret.id, arret.nom, arret.zone,
                         length(arret.lignes_desservies), arret.abribus, arret.eclairage))
    end

    CSV.write(joinpath(dossier, "statistiques_arrets.csv"), arrets_df)
    println("‚úÖ Export√©: statistiques_arrets.csv ($(nrow(arrets_df)) arr√™ts)")
end

"""
Export de la performance horaire
"""
function exporter_performance_horaire(systeme::SystemeSOTRACO, dossier::String)
    freq_horaire = Dict{Int, Int}()
    for donnee in systeme.frequentation
        heure = Dates.hour(donnee.heure)
        freq_horaire[heure] = get(freq_horaire, heure, 0) + donnee.montees + donnee.descentes
    end

    performance_df = DataFrame(
        Heure = Int[],
        Total_Passagers = Int[],
        Pourcentage_Journalier = Float64[]
    )

    total_journalier = sum(values(freq_horaire))
    
    for heure in 0:23
        passagers = get(freq_horaire, heure, 0)
        pourcentage = total_journalier > 0 ? round(100 * passagers / total_journalier, digits=2) : 0.0
        push!(performance_df, (heure, passagers, pourcentage))
    end

    CSV.write(joinpath(dossier, "performance_horaire.csv"), performance_df)
    println("‚úÖ Export√©: performance_horaire.csv (24 heures)")
end

"""
G√©n√©ration d'un r√©sum√© ex√©cutif format√©
"""
function generer_resume_executif(systeme::SystemeSOTRACO)
    resume = IOBuffer()
    
    println(resume, "üéØ R√âSUM√â EX√âCUTIF - ANALYSE SOTRACO")
    println(resume, "=" ^ 45)
    
    println(resume, "\nüìä M√âTRIQUES PRINCIPALES:")
    println(resume, "‚Ä¢ $(length(systeme.arrets)) arr√™ts analys√©s")
    println(resume, "‚Ä¢ $(length(systeme.lignes)) lignes de bus")
    println(resume, "‚Ä¢ $(length(systeme.frequentation)) points de donn√©es")
    
    if !isempty(systeme.frequentation)
        total_passagers = sum(d.montees + d.descentes for d in systeme.frequentation)
        println(resume, "‚Ä¢ $total_passagers mouvements de passagers analys√©s")
    end
    
    return String(take!(resume))
end

end # module Rapports